<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<p></p>
<h1>cmsimde</h1>
<p>動態網頁的主要檔案為  config/content.htm</p>
<p>當使用者在命令列中將目錄更換到 cmsimde, 然後以 python wsgi.py 執行 wsgi.py 程式時, 其實 Python 程式是仰賴 Flask 網際框架結構來進行資料伺服.</p>
<p>CMSiMDE 的作動需要 Flask 網際框架, 需要 bs4 與 lxml 進行 content.htm 的頁面解讀, 透過超文件檔案中的 h1, h2 與 h3 由上到下執行循序式分頁, 之後再透過 Javascript 與 css 將 h1, h2, h3 依照樹狀結構, h1 標題為第一階, h2 為第二階, h3 為第三階</p>
<h2>CMSiMDE 程式架構</h2>
<h3>網際內容管理</h3>
<p><span>全球資訊網無遠弗屆, 而且 WWW 的伺服架構相對於手機 APP 對於使用者而言更加友善, 除了允許多重身分無需實名綁定之外, 可以讓工程師進行各種協同設計, 因此若能廣泛利用網際環境建立各種應用程式環境, 將有助提升設計效益.</span></p>
<h3>如何建立CMSIMDE子模組</h3>
<p>git submodule add<span> </span><a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a> cmsimde</p>
<p>表示要透過 git submodule add 將<span> </span><a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a> 遠端倉儲當作子模組, 而且將資料存入子目錄 cmsimde 中</p>
<h3>兩種git clone</h3>
<p>git clone<span> </span><a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a></p>
<p>表示要將 cmsimde 倉儲的資料 clone 到近端, 針對沒有子模組設置的倉儲可以直接以 git clone 取下倉儲資料</p>
<p>git clone --recurse-submodules<span> </span><a href="https://github.com/mdecourse/cp2020.git">https://github.com/mdecourse/cp2020.git</a></p>
<p>表示要將 cp2020 倉儲中包含個子模組與可能子模組中的子模組等資料, 全部 clone 到近端.</p>
<h3>為何需要動態網頁和靜態網頁</h3>
<p>所謂的動態網頁指的是有登入系統配置的網際內容管理系統, 當使用者登入後進行內容管理, 網站會馬上呈現新版本內容, 通常無需進行網頁轉換.</p>
<p>所謂的靜態網頁則指網站通常沒有登入系統的配置, 而且通常只包含 html 與 Javascript 資料, 由於沒有登入系統, 因此沒有內容被駭的問題, 除非負責伺服超文件網頁的系統遭駭.</p>
<p>而 CMSiMDE 的動態網頁用於編輯網站內容, 而靜態網頁則可以利用 Github Pages, Gitlab Pages 與 Heroku 進行伺服.</p>
<p><br/><span>假如 CMSiMDE 不設為子模組 &lt;&lt;<span> </span></span><a href="https://40923131.github.io/cp2020/content/%E5%81%87%E5%A6%82%20CMSiMDE%20%E4%B8%8D%E8%A8%AD%E7%82%BA%E5%AD%90%E6%A8%A1%E7%B5%84.html">Previous</a><span><span> </span></span><a href="https://40923131.github.io/cp2020/content/CMSiMDE%20%E6%9C%89%E7%94%9A%E9%BA%BC%E4%BD%BF%E7%94%A8%E4%B8%8A%E7%9A%84%E9%99%90%E5%88%B6%E5%97%8E%E6%AF%94%E6%96%B9%E8%AA%AA%E8%83%BD%E5%A4%A0%E4%BD%BF%E7%94%A8%E9%82%A3%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%AC%A6%E8%99%9F,%20%E7%82%BA%E4%BB%80%E9%BA%BC%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E5%88%86%E8%99%9F,%20%E4%BB%A5%E5%8F%8A%E6%89%80%E8%AC%82%E7%9A%84%E6%A8%99%E9%A1%8C%E6%9C%89%E6%B2%92%E6%9C%89%E6%9C%80%E5%A4%9A%E5%B9%BE%E5%80%8B%E5%AD%97%E5%85%83%E7%9A%84%E9%99%90%E5%88%B6,%20%E5%8F%A6%E5%A4%96%E5%B0%B1%E6%98%AF%E5%81%87%E5%A6%82%E6%A8%99%E9%A1%8C%E9%81%8E%E9%95%B7,%20%E6%9C%83%E7%99%BC%E7%94%9F%E7%94%9A%E9%BA%BC%E7%8B%80%E6%B3%81%E8%88%87%E5%BE%8C%E6%9E%9C.html">Next</a><span><span> </span>&gt;&gt; CMSiMDE 有甚麼使用上的限制嗎比方說能夠使用那些特殊符號, 為什麼不能使用分號, 以及所謂的標題有沒有最多幾個字元的限制, 另外就是假如標題過長, 會發生甚麼狀況與後果</span></p>
<h1>hw1</h1>
<h2>p88</h2>